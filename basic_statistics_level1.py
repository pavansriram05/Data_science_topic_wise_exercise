# -*- coding: utf-8 -*-
"""Basic_statistics_level1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vSTPyAubZa_lQkON_8SRtFdPjVhx6crl
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sb
sb.set()

a=pd.read_csv("/content/drive/MyDrive/Assignments/basic stats 1/sales_data_with_discounts.csv")
a.head()

a.tail()

a.shape

a.info() # info is to give the description of the data along with null value count and data types and columns along with names and total count

b=a.select_dtypes(include=np.number)
b.head()

"""#the numerical values of this datafarme are
* Volume
* Avg Price
* Total Sales Value
* Discount Rate (%)
*  Discount Amount
* Net Sales Value
"""

a.dtypes # dtypes is to give you the type of data present in the dataframe column wise

print(a.columns) # to find the names of the columns
print("   $ "*10)
print(a.axes) #length of the data frame
print("    $"*10)
print(a.ndim) #shows the dimension of the dataframe
print("    $"*10)
print(a.size) #total elements of the dataframe
print("    $"*10)
print(a.values) #convert the whole dataframe into arrays(rowwise)

a.describe()

"""# mean of every numerical feature is present in this description
* std stands for standard deviation
* 50% mark indicates the median of the feature

"""

a.Volume.mode()

a["Avg Price"].mode()

a["Total Sales Value"].mode()

a["Discount Rate (%)"].mode().head(2)

a["Discount Amount"].mode().head(2)

a["Net Sales Value"].mode().head(2)

"""#MODE OF THE NUMERICAL FEATURE VARY FROM EACH OTHER DIFFERENTLY
* VOLUME IS 3
* AVG PRICE HAS
    -0     400,
    -1     450,
    -2     500,
    -3    1300,
    -4    8100,
*TOTAL SALES VALUE HAS 23400
* and the interesting fact is that the other three features such as
discount rate, discount amount and net sales value, these three has unique value for every single entry so as there is no repetative value hence every value is considered as mode
"""

a.info()

#a["Avg Price"].plot(kind="hist")
# a["Volume"].plot(kind="hist")
#a["Total Sales Value"].plot(kind="hist")
#a["Discount Rate (%)"].plot(kind="hist")
#a["Discount Amount"].plot(kind="hist")
#a["Net Sales Value"].plot(kind="hist")

a.hist(figsize=(20,10))
plt.show()

plt.subplot(2,3,1 )
plt.boxplot(a["Volume"])

plt.subplot(2,3,2)
plt.boxplot(a["Avg Price"])

plt.subplot(2,3,3)
plt.boxplot(a["Total Sales Value"])

plt.subplot(2,3,4)
plt.boxplot(a["Discount Rate (%)"])

plt.subplot(2,3,5)
plt.boxplot(a["Discount Amount"])

plt.subplot(2,3,6)
plt.boxplot(a["Net Sales Value"])

plt.show()

a.select_dtypes(["object"]).head()

plt.figure(figsize=(20,20))
plt.subplot(2,3,1)
a['Day'].value_counts().plot(kind='bar')
plt.subplot(2,3,2)
a['SKU'].value_counts().plot(kind='bar')
plt.subplot(2,3,3)
a['City'].value_counts().plot(kind='bar')
plt.subplot(2,3,4)
a['BU'].value_counts().plot(kind='bar')
plt.subplot(2,3,5)
a['Brand'].value_counts().plot(kind='bar')
plt.subplot(2,3,6)
a['Model'].value_counts().plot(kind='bar')

plt.subplot(1,2,1)
a['Day'].value_counts().plot(kind='bar')

plt.subplot(1,2,2)
a['Brand'].value_counts().plot(kind='bar')

"""# this plotting them individually and here the y axis is the index, so we are not comparing anything

lets try it in a diffrent way
"""

plt.figure(figsize=(10,5))
sb.barplot(x="Day",y="Brand",data=a)

plt.figure(figsize=(10,5))
sb.barplot(x="Brand",y="Avg Price",data=a)

plt.figure(figsize=(30,15))
sb.barplot(x="Brand",y="Avg Price",data=a, hue="Model")

plt.figure(figsize=(10,5))
sb.barplot(x="Brand",y="Total Sales Value",data=a)

plt.figure(figsize=(30,15))
sb.barplot(x="Brand",y="Total Sales Value",data=a, hue="Discount Rate (%)")

plt.figure(figsize=(10,5))
sb.barplot(x="Day",y="Total Sales Value",data=a)

plt.figure(figsize=(10,5))
sb.barplot(x="Day",y="Total Sales Value",data=a, hue="Brand")

sb.pairplot(a)

#STANDARDIZATION

def get_stand(x):
  return ((x-x.mean())/(x.std()))#formula of z scores

#NORMALIZATION
def get_norm(x):
  return((x-x.min())/(x.max()-x.min()))

get_stand(b).head()

a["Brand"].value_counts()

#creating dummy variables
pd.get_dummies(a["Brand"],dtype="int")

